Ruby on Rails
===============

Rails
	Some websites
		http://guides.rubyonrails.org/getting_started.html
		http://ruby.railstutorial.org/ruby-on-rails-tutorial-book
		http://guides.rubyonrails.org/	
	Definitions
		Web Application development Framework written in Ruby. Aims to make web develpment easier.
		Principles(philosophy)
			DRY - "Don't Repeat Yourself" 
			Convention over configuration: If everybody does in a way, it should be a pattern, then for basic operations, just follow the convention.
	How is the process
		http://www.decom.ufop.br/imobilis/wp-content/uploads/2012/07/rails2.png

	Install:
		Windows 1
			http://railsinstaller.org/
			This tool installs many applications:
				Ruby 1.9.3 : The language and its compiler.
				Rails 3.2: The framework Rails
				Bundler: To manage dependencies(like Maven, Gradle)  http://bundler.io/
					Tracks the application code and its rubygems it needs to run.
					Specify your dependencies in a Gemfile in your project's root:
					automates the intalation and matainance of gems in gemsets.
					source 'https://rubygems.org' 
					gem 'nokogiri' 
					gem 'rack', '~>1.1' 
					gem 'rspec', :require => 'spec'
				Git: To access the github and so on.
				Sqlite: Simple and local database.  Everything is saved in a file.
				TinyTDS:  Simple FreeTDS(Tabular Data Stream) for ruby.  Library that can includes a ODBC to access SQL Sever or Sybase.
					FreeTDS is very used by UNIX/Linux developers.
				Suporte do SQL Server
				DevKit Development Kit for C++ and Ruby.
		Other links	
			Good to use Sinatra.  Auto web container.  It is like spark or springboot.
			Another good IDE
				http://www.sublimetext.com/2
			And another famous IDE (SubMine) from jet brains.
				http://www.jetbrains.com/ruby/
			http://rubygems.org/
				Tool that goes to a community's gems host for ruby.  
				RubyGems is a package management framework for Ruby
				A GEM seems to be a kind a plugin or a package.
				
				To install: ruby setup.rb
				After:
					gem update --system  //Update to the latest RubyGems version
					gem build foo.gemspec //Build your gem
					gem push foo-1.0.0.gem //Deploy your gem instantly
			https://rvm.io/ (Ruby Version Manager)
				RVM is a command-line tool which allows you to easily install, manage, and work with multiple ruby environments from interpreters to sets of gems.
					Switches between different Rubies and GEM environments
					Seems the blunder can be integrated with RVM
					http://rvm.io/integration/bundler
					http://www.ginzametrics.com/blog/rvm-bundler-in-five-seconds/
		- Steps 
			Windows 1
				1 - Installs railsInstallar(in root)
				2 - Install rubygems
					Unzip and call ruby setup.rb
			Wdindws 2
				1 - Donwload rubyInstaller
				2 - Install rubygems
				3 - gem install rails
			Linux
				http://www.akitaonrails.com/2012/08/13/ruby-e-rails-no-ubuntu-12-04-lts-precise
				-pangolin
	Create a project, based on http://guides.rubyonrails.org/getting_started.html#hello-rails-bang
				- rails new blog
			run the server
				- rails server
			create the controler for welcome and index
				- rails generate controller welcome index  
				Then /config/routes.rb include the command
					- get "welcome/index"
				Uncomment bellow and the root became the page index.
					root to 'welcome#index'
				Include resources
					Resources are related to model.
					- resources :posts
					This resource is create in server a REST reference to be done.  
					It is necessary to create a controller
					Call: - rake routes
				Create the controller for post
					- rails g(or generate) controller posts
				If call http://localhost:3000/posts/new
					It will complain that no action "new" exists.
					Need to create a method
						def new
						end
				Create a file  app/views/posts/new.html.erb
					<%= form_for :post, url: posts_path do |f| %>
					  <p>
					    <%= f.label :title %><br>
					    <%= f.text_field :title %>
					  </p>
					 
					  <p>
					    <%= f.label :text %><br>
					    <%= f.text_area :text %>
					  </p>
					 
					  <p>
					    <%= f.submit %>
					  </p>
					<% end %>
						
	Creating a new application called gestbook
		- rails new gestbook
			Gemfile
				Contain all the dependencies.
				bundle install  //read this file and install all the dependencies
			Creates a application and install all the dependencies(gems).
		- About ignore files (.ignore)
			http://help.github.com/ignore-files/
		- cd gestbook
			Many directories and files are created, the most imprtant for developer is app/, because in this directory we find all files of controller, model, views, helpers.
		- bundle install
		OR
		- bundle install --without production  //run without production.

		-if there is a error: gem install uglifier
		
		- To run the rails: rails server.
		- Server is running, then, go to http://localhost:3000
			The following image appears.
			firstImageRails
		Builing a project

		My small project, guestbook will have this configuration:
			User -> name, email, webpage, title, aboutme
			Comment -> String comment, User user. belongsTo feedback
			Feedback -> title, feedback, User user, hasmany comments
	Another way to create projects (Passing -m get a template.)
			rails new myappTest -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb
			An example of applications working with bootstrap
			https://github.com/RailsApps/rails-bootstrap/


	RVM
		RVM is a command line tool which allows us to easily install, manage and work with multiple ruby environments from interpreters to sets of gems
	Pik
		Pik is a version manager for Ruby. You can handle/install multiple versions of Ruby and switch between them easily.
		gem insatll pik
		pik_install C:\tools
		Add this to your Path Environmental variables

	To upgrade to rails 4
		gem install rails --version=4.0
	
	The inheritances
		Model
			http://ruby.railstutorial.org/images/figures/demo_model_inheritance.png
		Controller
			http://ruby.railstutorial.org/images/figures/demo_controller_inheritance.png

	git and rails
		Install
			$ sudo apt-get install git-core git-doc 
			$ sudo apt-get install gitweb git-gui gitk git-email git-svn
			sudo apt-get update

		$ git config --global user.name "Your Name"
		$ git config --global user.email your.email@example.com

		$ git config --global alias.co checkout   //just an alias called co from checkout.

		git config --global core.editor "subl -w"  //a default editor

		Inside the project
			git init
			git add .
			git commit -m “text
			git remote add origin https://github.com/romalopes/railsFirstApp.git
			git push -u origin master

			Branch
			$ git checkout -b New_Files
			$ git branch
			$ git branch -d New_Files  //to merge

	Heroku and rails
		https://devcenter.heroku.com/articles/getting-started-with-ruby
		Heroku works with PostgresQL
			- add a the declarations in Gemfile to be like the following
		GemFile
			source 'https://rubygems.org'
			ruby '2.0.0'
			#ruby-gemset=railstutorial_rails_4_0

			gem 'rails', '4.0.0'

			group :development do
			  gem 'sqlite3', '1.3.8'
			end

			gem 'sass-rails', '4.0.1'
			gem 'uglifier', '2.1.1'
			gem 'coffee-rails', '4.0.1'
			gem 'jquery-rails', '3.0.4'
			gem 'turbolinks', '1.1.1'
			gem 'jbuilder', '1.0.2'

			group :doc do
			  gem 'sdoc', '0.3.20', require: false
			end

			group :production do
			  gem 'pg', '0.15.1'
			  gem 'rails_12factor', '0.0.2'
			end

		Before deploy to heroku
			$ bundle install --without production
			$ bundle update
			$ bundle install

		Basic Commands básicos:
			$ heroku create
			$ git push heroku master
			$ heroku run rake db:migrate
			$ heroku open
			Running in http://railsfirstapproma.herokuapp.com/users

	MVC
	http://ruby.railstutorial.org/images/figures/mvc_detailed.png
	Problems of Scarffold:
		- No data validation
		- No authentication
		- No tests
		- No layout

#### A Simple application:
	Model
		User: id:integer, name:string, email:string, password:string
		micropost: id:integer, content:string, user_id:integer
	Creating Resources:
		Create a User scaffold
		$ rails generate scaffold User name:string email:string password:string
		$ bundle exec rake db:migrate OR JUST rake db:migrate
			What it does:
				Model(class User < ActiveRecord::Base)
				A variable @users is created in UsersController
		include -> resources :user in config/routes.rb

	Controler(class UsersController < ApplicationController)
		As it is scaffold fill the file to REST/CRUD.
		$ bundle exec rake db:migrate OR JUST rake db:migrate
		$bundle exec rake -T db list of tasks related to db


	Herroku
		$ heroku create
		$ git push heroku master
		$ heroku run rake db:migrate
		$ heroku open
		Running in http://railsfirstapproma.herokuapp.com/users
	


Sumary of guides.rubyonrails
=================

Active Record Basics

	It is the M from MVC

	Names convention
	Model/class 	Table/Schema
		Post 			posts 		
		LineItem 		line_items
		Deer 			deer
		Mouse 			mice

	Example of a class

		class
			 
			Product < ActiveRecord::Base
			 	self.table_name = "PRODUCT"   # Optional
				self.primary_key = "product_id" #Optional
			end

		Result in DB
			CREATE TABLE products (
				id int(11) 	NOT	NULL auto_increment,
				name varchar (255),
				PRIMARY KEY(id)
			);

	CRUD

	Create

		user = User.create(name: "David", occupation: "Code Artist")
		//with new object is created but not saved
	  	user = User.new do |u|
	  		u.name = "David"
	  		u.occupation = "Code Artist"
		end

	Read
		More:
		  http://guides.rubyonrails.org/active_record_querying.html

		# return a collection with all users
		users = User.all

		# return the first user
		user = User.first

		# return the first user named David
		david = User.find_by(name: 'David')

		# find all users named David who are Code Artists and sort by created_at in reverse chronological order
		users = User.where(name: 'David', occupation: 'Code Artist').order('created_at DESC')


	Update
		user = User.find_by(name: 'David')
		user.name = 'Dave'
		user.save

		user = User.find_by(name: 'David')
		user.update(name: 'Dave')

		User.update_all 
		"max_login_attempts = 3, must_change_password = 'true'"

	Delete
		user = User.find_by(name: 'David')
		user.destroy

	Validation
		http://guides.rubyonrails.org/active_record_validations.html
	  Ex:
		class
		 
		User < ActiveRecord::Base
		  
		     validates :name, presence: true
		end
	 
		User.create  
		# => false
		User.create! 
		# => ActiveRecord::RecordInvalid: Validation failed: Name can't be blank

	Callbacks
	  http://guides.rubyonrails.org/active_record_callbacks.html
	   Attach code to certain events in the life-cycle of your models.  Allows to include behavior to the model transparently executing code when some event happens.  Ex, when you create, update or delete a object.

	Migration
	http://guides.rubyonrails.org/migrations.html
	   Uses a DSL for managing a database schema.  Migration files are executed against any DB that Active Record supports using Rake
		Ex:
		class CreatePublications < ActiveRecord::Migration
		  
		  def change
		    
			create_table :publications do |t|
		      		t.string 	:title
		      		t.text 	 	:description
		      		t.references 	:publication_type
		      		t.integer 	:publisher_id
		      		t.string 	:publisher_type
		      		t.boolean 	:single_issue
		       
				t.timestamps
		    	end
		    	add_index :publications, :publication_type_id
		  end
		end
	Comands of rake
		rake db:drop
		rake db:resed
		rake db:migrate 

		rake db:populate
		 rake test:prepare


Rails Database Migration
	Use Ruby DSL(Domain Specific Language) instead of SQL
	File updated is  db/schema.rb
	Ex:
		class CreateProducts < ActiveRecord::Migration
		  def change
		    create_table :products do |t|
		      t.string :name
		      t.text :description
		 
		      t.timestamps
		    end
		  end
		end
		t.timestamps creates the columns created_at and updated_at.
	Creating the Migration 
		Command:
			$ rails generate migration  CommandClass
		Migrations are created in db/migrate as the name: 	
			YYYMMDDHHMMSS_NAME_CLASS(table).rb
		Ex:
			$ rails generate migration AddPartNumberToProducts
			generates in a file YYYMMDDHHMMSS_add_details_to_products.r:
				class AddPartNumberToProducts < ActiveRecord::Migration
				  def change
				  end
				end
		Use conventions:
			CreateXXX
				$ rails generate migration CreateProducts name:string part_number:string
				-generates:
					class CreateProducts < ActiveRecord::Migration
					  def change
					    create_table :products do |t|
					      t.string :name
					      t.string :part_number
					    end
					  end
					end
			AddXXXToYYY
				$ rails generate migration AddPartNumberToProducts part_number:string:index price:decimal
				generates:
					class AddPartNumberToProducts < ActiveRecord::Migration
					  def change
					    add_column :products, :part_number, :string
					    add_index :products, :part_number
					    add_column :products, :price, :decimal
					  end
					end

			RemoveXXXFromYYY
				$ rails generate migration RemovePartNumberFromProducts part_number:string
				-generates
					class RemovePartNumberFromProducts < ActiveRecord::Migration
					  def change
					    remove_column :products, :part_number, :string
					  end
					end
		Including reference to another Class
			$ rails generate migration AddUserRefToProducts user:references
			-generates
				class AddUserRefToProducts < ActiveRecord::Migration
				  def change
				    add_reference :products, :user, index: true
				  end
				end
			- This migration will create a user_id column and appropriate index.
		Joint table
			$ rails g migration CreateJoinTableCustomerProduct customer product
			-generates
				class CreateJoinTableCustomerProduct < ActiveRecord::Migration
				  def change
				    create_join_table :customers, :products do |t|
				      # t.index [:customer_id, :product_id]
				      # t.index [:product_id, :customer_id]
				    end
				  end
				end
	Model Generators
		When generates a model, rails will also generate a migration file 

		$ rails generate model Product name:string description:text
		- generates
			class CreateProducts < ActiveRecord::Migration
			  def change
			    create_table :products do |t|
			      t.string :name
			      t.text :description
			 
			      t.timestamps
			    end
			  end
			end
	Add Type modifier
		- limit Sets the maximum size of the string/text/binary/integer fields
		- precision Defines the precision for the decimal fields
		- scale Defines the scale for the decimal fields
		- polymorphic Adds a type column for belongs_to associations
		- null Allows or disallows NULL values in the column.
		Ex:
			$ rails generate migration AddDetailsToProducts price:decimal{5,2} supplier:references{polymorphic}
			- generates
				class AddDetailsToProducts < ActiveRecord::Migration
				  def change
				    add_column :products, :price, :decimal, precision: 5, scale: 2
				    add_reference :products, :supplier, polymorphic: true, index: true
				  end
				end
	Parts of Migration file
		Create table
			create_table :products, options: "ENGINE=BLACKHOLE" do |t|
			  t.string :name, null: false
			end
		Join Table
			create_join_table :products, :categories, column_options: {null: true}
				- Creates a new table categories_products with 2 columns(category_id, product_id) with the option that column can be null.
			create_join_table :products, :categories, table_name: :categorization
				- Set the name of the table_name
		Add Index which is not created by default
			create_join_table :products, :categories do |t|
			  t.index :product_id
			  t.index :category_id
			end
	Change Table
		Change table, including/removing/renaming and so on
		Ex:
			change_table :products do |t|
			  t.remove :description, :name  #remove column description and name
			  t.string :part_number  #Creates par_number column
			  t.index :part_number	#creates part_number index
			  t.rename :upccode, :upc_code 
			end
	Executing a SQL directry
		Products.connection.execute('UPDATE `products` SET `price`=`free` WHERE 1')
	Methods
		They can be used when the migration can be reverted
		add_column
		add_index
		add_reference
		add_timestamps
		create_table
		create_join_table
		drop_table (must supply a block)
		drop_join_table (must supply a block)
		remove_timestamps
		rename_column
		rename_index
		remove_reference
		rename_table
	Reversible
		Used in complex migrations where Active Records doesn't know to revese. Using reverse, it is possible to specify what to do in a migration.
		Ensure that the actions are executed in the right order.
	Up/Down methods
		Old style of migration intead of change method.
		Up
			should describe the transformation you'd like to make to your schema
		Down
			should revert the transformations done by the up method
		Ex:
			Create a table in up and delete it in down
	Running migration
		$ rake db:migrate VERSION=20080906120000

		rollback 3 steps
			$ rake db:rollback STEP=3
		roolback 3 steps and redo the migration
			$ rake db:migrate:redo STEP=3
		Reset database
			Drop the table, recreate and load the current schema
			$ rake db:reset
			- If a migrantion can't be rolledback, the command doesn't work.
		Running migration of different environment
			$ rake db:migrate RAILS_ENV=test
	Output
		say -> print a message
			say 'something'
		suppress_messages -> avoid any message in a block
			ppress_messages {add_index :products, :name}
    			say "and an index!", true
    	say_with_time
    		

	


















http://railsapps.github.io/installing-rails.html
http://www.psychocats.net/ubuntu/virtualbox


