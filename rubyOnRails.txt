Ruby on Rails
===============

Rails
	Some websites
		http://guides.rubyonrails.org/getting_started.html
		http://ruby.railstutorial.org/ruby-on-rails-tutorial-book
		http://guides.rubyonrails.org/	
	Definitions
		Web Application development Framework written in Ruby. Aims to make web develpment easier.
		Principles(philosophy)
			DRY - "Don't Repeat Yourself" 
			Convention over configuration: If everybody does in a way, it should be a pattern, then for basic operations, just follow the convention.
	How is the process
		http://www.decom.ufop.br/imobilis/wp-content/uploads/2012/07/rails2.png

	Install:
		Windows 1
			http://railsinstaller.org/
			This tool installs many applications:
				Ruby 1.9.3 : The language and its compiler.
				Rails 3.2: The framework Rails
				Bundler: To manage dependencies(like Maven, Gradle)  http://bundler.io/
					Tracks the application code and its rubygems it needs to run.
					Specify your dependencies in a Gemfile in your project's root:
					automates the intalation and matainance of gems in gemsets.
					source 'https://rubygems.org' 
					gem 'nokogiri' 
					gem 'rack', '~>1.1' 
					gem 'rspec', :require => 'spec'
				Git: To access the github and so on.
				Sqlite: Simple and local database.  Everything is saved in a file.
				TinyTDS:  Simple FreeTDS(Tabular Data Stream) for ruby.  Library that can includes a ODBC to access SQL Sever or Sybase.
					FreeTDS is very used by UNIX/Linux developers.
				Suporte do SQL Server
				DevKit Development Kit for C++ and Ruby.
		Other links	
			Good to use Sinatra.  Auto web container.  It is like spark or springboot.
			Another good IDE
				http://www.sublimetext.com/2
			And another famous IDE (SubMine) from jet brains.
				http://www.jetbrains.com/ruby/
			http://rubygems.org/
				Tool that goes to a community's gems host for ruby.  
				RubyGems is a package management framework for Ruby
				A GEM seems to be a kind a plugin or a package.
				
				To install: ruby setup.rb
				After:
					gem update --system  //Update to the latest RubyGems version
					gem build foo.gemspec //Build your gem
					gem push foo-1.0.0.gem //Deploy your gem instantly
			https://rvm.io/ (Ruby Version Manager)
				RVM is a command-line tool which allows you to easily install, manage, and work with multiple ruby environments from interpreters to sets of gems.
					Switches between different Rubies and GEM environments
					Seems the blunder can be integrated with RVM
					http://rvm.io/integration/bundler
					http://www.ginzametrics.com/blog/rvm-bundler-in-five-seconds/
		- Steps 
			Windows 1
				1 - Installs railsInstallar(in root)
				2 - Install rubygems
					Unzip and call ruby setup.rb
			Wdindws 2
				1 - Donwload rubyInstaller
				2 - Install rubygems
				3 - gem install rails
			Linux
				http://www.akitaonrails.com/2012/08/13/ruby-e-rails-no-ubuntu-12-04-lts-precise
				-pangolin
	Create a project, based on http://guides.rubyonrails.org/getting_started.html#hello-rails-bang
				- rails new blog
			run the server
				- rails server
			create the controler for welcome and index
				- rails generate controller welcome index  
				Then /config/routes.rb include the command
					- get "welcome/index"
				Uncomment bellow and the root became the page index.
					root to 'welcome#index'
				Include resources
					Resources are related to model.
					- resources :posts
					This resource is create in server a REST reference to be done.  
					It is necessary to create a controller
					Call: - rake routes
				Create the controller for post
					- rails g(or generate) controller posts
				If call http://localhost:3000/posts/new
					It will complain that no action "new" exists.
					Need to create a method
						def new
						end
				Create a file  app/views/posts/new.html.erb
					<%= form_for :post, url: posts_path do |f| %>
					  <p>
					    <%= f.label :title %><br>
					    <%= f.text_field :title %>
					  </p>
					 
					  <p>
					    <%= f.label :text %><br>
					    <%= f.text_area :text %>
					  </p>
					 
					  <p>
					    <%= f.submit %>
					  </p>
					<% end %>
						
	Creating a new application called gestbook
		- rails new gestbook
			Gemfile
				Contain all the dependencies.
				bundle install  //read this file and install all the dependencies
			Creates a application and install all the dependencies(gems).
		- About ignore files (.ignore)
			http://help.github.com/ignore-files/
		- cd gestbook
			Many directories and files are created, the most imprtant for developer is app/, because in this directory we find all files of controller, model, views, helpers.
		- bundle install
		OR
		- bundle install --without production  //run without production.

		-if there is a error: gem install uglifier
		
		- To run the rails: rails server.
		- Server is running, then, go to http://localhost:3000
			The following image appears.
			firstImageRails
		Builing a project

		My small project, guestbook will have this configuration:
			User -> name, email, webpage, title, aboutme
			Comment -> String comment, User user. belongsTo feedback
			Feedback -> title, feedback, User user, hasmany comments
	Another way to create projects (Passing -m get a template.)
			rails new myappTest -m https://raw.github.com/RailsApps/rails-composer/master/composer.rb
			An example of applications working with bootstrap
			https://github.com/RailsApps/rails-bootstrap/


	RVM
		RVM is a command line tool which allows us to easily install, manage and work with multiple ruby environments from interpreters to sets of gems
	Pik
		Pik is a version manager for Ruby. You can handle/install multiple versions of Ruby and switch between them easily.
		gem insatll pik
		pik_install C:\tools
		Add this to your Path Environmental variables

	To upgrade to rails 4
		gem install rails --version=4.0
	
	The inheritances
		Model
			http://ruby.railstutorial.org/images/figures/demo_model_inheritance.png
		Controller
			http://ruby.railstutorial.org/images/figures/demo_controller_inheritance.png

	git and rails
		Install
			$ sudo apt-get install git-core git-doc 
			$ sudo apt-get install gitweb git-gui gitk git-email git-svn
			sudo apt-get update

		$ git config --global user.name "Your Name"
		$ git config --global user.email your.email@example.com

		$ git config --global alias.co checkout   //just an alias called co from checkout.

		git config --global core.editor "subl -w"  //a default editor

		Inside the project
			git init
			git add .
			git commit -m “text
			git remote add origin https://github.com/romalopes/railsFirstApp.git
			git push -u origin master

			Branch
			$ git checkout -b New_Files
			$ git branch
			$ git branch -d New_Files  //to merge

	Heroku and rails
		https://devcenter.heroku.com/articles/getting-started-with-ruby
		Heroku works with PostgresQL
			- add a the declarations in Gemfile to be like the following
		GemFile
			source 'https://rubygems.org'
			ruby '2.0.0'
			#ruby-gemset=railstutorial_rails_4_0

			gem 'rails', '4.0.0'

			group :development do
			  gem 'sqlite3', '1.3.8'
			end

			gem 'sass-rails', '4.0.1'
			gem 'uglifier', '2.1.1'
			gem 'coffee-rails', '4.0.1'
			gem 'jquery-rails', '3.0.4'
			gem 'turbolinks', '1.1.1'
			gem 'jbuilder', '1.0.2'

			group :doc do
			  gem 'sdoc', '0.3.20', require: false
			end

			group :production do
			  gem 'pg', '0.15.1'
			  gem 'rails_12factor', '0.0.2'
			end

		Before deploy to heroku
			$ bundle install --without production
			$ bundle update
			$ bundle install

		Basic Commands básicos:
			$ heroku create
			$ git push heroku master
			$ heroku run rake db:migrate
			$ heroku open
			Running in http://railsfirstapproma.herokuapp.com/users

	MVC
	http://ruby.railstutorial.org/images/figures/mvc_detailed.png
	Problems of Scarffold:
		- No data validation
		- No authentication
		- No tests
		- No layout

#### A Simple application:
	Model
		User: id:integer, name:string, email:string, password:string
		micropost: id:integer, content:string, user_id:integer
	Creating Resources:
		Create a User scaffold
		$ rails generate scaffold User name:string email:string password:string
		$ bundle exec rake db:migrate OR JUST rake db:migrate
			What it does:
				Model(class User < ActiveRecord::Base)
				A variable @users is created in UsersController
		include -> resources :user in config/routes.rb

	Controler(class UsersController < ApplicationController)
		As it is scaffold fill the file to REST/CRUD.
		$ bundle exec rake db:migrate OR JUST rake db:migrate
		$bundle exec rake -T db list of tasks related to db


	Herroku
		$ heroku create
		$ git push heroku master
		$ heroku run rake db:migrate
		$ heroku open
		Running in http://railsfirstapproma.herokuapp.com/users
	



########A new application
		http://ruby.railstutorial.org
		- Create a project without tests
		$ rails new romaRailsSampleApp --skip-test-unit
	- Change gemFile
		To include capybara and create environments
	- Run bundle
		$ bundle install --without production
		$ bundle update
		$ bundle install
	- Change config/initializer/secret_token.rb
		 secret token used by Rails to encrypt session variables so that it is dynamically generated rather than hard-coded
		- Configure Rails to user RSpec in place of Test:Unit
			$ rails generate rspec:install
	- Run git and heroku
		As I already know.
		- git checkout -b static-pages
			To create a branch for this modifications
	- Creating static pages
		As every page has to pass through controllers, it is needed to create generate a controller
		$ rails generate controller StaticPages home help --no-test-framework
		- Create home and help, without tests infra-structure(RSpec)
			Create many files(static_pages_controller, home.htlm.erb, static_pages_helper.rb, static_pages.js.coffee, static_pages.css.scss)
			Add home and help to routes.rb
	- If I want to remove a Controoler or Model
		$ rails generate controller FooBars baz quux
  		$ rails destroy  controller FooBars baz quux
  		
  		$ rails generate model Foo bar:string baz:integer
		$ rails destroy model Foo
		
		$ rake db:migrate
		$ rake db:rollback
		$ rake db:migrate VERSION=0 # Go to begin
	- Testing
		Introductions
			- RSpec uses BDD while Test::Unit uses TDD
			- To learn more: https://www.codeschool.com/courses/testing-with-rspec
			- Capybara provide a natural-language syntax to integrate the tests.
			- Cucumber can be used tool
		Step 1. write the failing test
			$ rails generate integration_test static_pages
				Will create spec/requests/static_pages_spec.rb
			The code is a bit different from traditional Ruby due to DSL.
			ex:
			describe "Home page" do
			    it "should have the content 'Sample App'" do
			      	#visit '/static_pages/home'
			    	#visit '/home'
	    			visit home_path
			      expect(page).to have_content('Sample App')
			    end
			  end
			end

			OR
			  subject { page }   # use the "expect(page).to "

			  describe "Home page" do
			    before { visit root_path }  # avoit the visit in each call

			    it { should have_content('Sample App') }
			    it { should have_title("Ruby on Rails Tutorial Sample App") }
			    it { should have_title(full_title('')) }
			    it { should_not have_title('| Home') }
			  end

			  describe "Contact page" do
			    before { visit contact_path }

			    it { should have_content('Contact') }
			    it { should have_selector('h1', text: 'Contact') }
			    it { should have_title(full_title('Contact')) }
			  end

			- full_title...  is a method created in spec/suport/utilities.rb
			  Identical to the methods created in helpers/application_helper.rb, which is used but the application

				def full_title(page_title)
				  base_title = "Ruby on Rails Tutorial Sample App"
				  if page_title.empty?
				    base_title
				  else
				    "#{base_title} | #{page_title}"
				  end
				end

				Later change utilities.br to:
				include ApplicationHelper

				and create a files spec/helper/application_helper_spec.rb
					require 'spec_helper'

					describe ApplicationHelper do

					  describe "full_title" do
					    it "should include the page title" do
					      expect(full_title("foo")).to match(/foo/)
					    end

					    it "should include the base title" do
					      expect(full_title("foo")).to match(/^Ruby on Rails Tutorial Sample App/)
					    end

					    it "should not include a bar for the home page" do
					      expect(full_title("")).not_to match(/\|/)
					    end
					  end
					end



			Reference for test:
			    it { should have_content('Contact') }
			    it { should have_selector('h1', text: 'Contact') }
			    it { should have_title(full_title('Contact')) }
			    it { should_not have_title(full_title('Contact')) }
 				click_link "About" expect(page).to have_title(full_title('About Us'))
			change config/routes.rb
			From
				get "static_pages/contact"
				get "static_pages/home"
				get "static_pages/help"
				get "static_pages/about"
			To
				root  'static_pages#home'
				match '/',		  to: 'static_pages#home',    via: 'get'
				match '/home',    to: 'static_pages#home',    via: 'get'
				match '/help',    to: 'static_pages#help',    via: 'get'
				match '/about',   to: 'static_pages#about',   via: 'get'
				match '/contact', to: 'static_pages#contact', via: 'get'
			These changes will allow pages to be accesses directly: /home instead of static_pages/rome.
			
			about_path -> '/about'
			about_url  -> 'http://localhost:3000/about'

		Step 2 Include the capybara in spec_helper.rb
			 config.include Capybara::DSL
		Step 3. Running the test
			$ bundle exec rspec spec/requests/static_pages_spec.rb
				It will fail at first.
			- Just include
				<h1>Sample App</h1>
				It will run because the test expects it.
		- Test with GUARD - https://github.com/guard/guard
			- Automate unit test
		- Speeding up tests with Spork - https://github.com/sporkrb/spork
			Everytime we run $ exec rspec, it is reloaded 

			Run again: bundle exec guard


		- Test and Rails inside Sublime
			https://github.com/maltize/sublime-text-2-ruby-tests
			Command-Shift-R: run a single test (if run on an it block) or group of tests (if run on a describe block)
			Command-Shift-E: run the last test(s)
			Command-Shift-T: run all the tests in current file

	- Adding a page already using tests
		In static_pages_spec.rb
			describe "About page" do
				it "should have the content 'About Us'" do
				  visit '/static_pages/about'
				  expect(page).to have_content('About Us')
				end
			end
		- Run the test and it will fail
			$ bundle exec rspec spec/requests/static_pages_spec.rb
		- Add the about page in config/routes.rb
			 get "static_pages/about"
		- Add the method in static_pages_controller
			 def about
  			end
  	- layout 
  		app/views/layouts/application.html.erb it used but all pages.

  			Include:
  			 	<%= yield(:title) %>	<--- Insert title
  				<%= yield %>			<--- Insert content

  			Ex:
		  		<% provide(:title, 'Home') %>
				<!DOCTYPE html>
				<html>
				  <head>
				    <title>Ruby on Rails Tutorial Sample App | <%= yield(:title) %></title>
				  </head>
				  <body>
				    <h1>Sample App</h1>
				    <p>
				      This is the home page for the
				      <a href="http://railstutorial.org/">Ruby on Rails Tutorial</a>
				      sample application.
				    </p>
				  </body>
				</html>

Important elements of Ruby that are used in Rails
	About views/layouts/application.html.erb
		<%= stylesheet_link_tag "application", media: "all",
                                       "data-turbolinks-track" => true %>
        Four Ruby ideas:
       	1- built-in Rails Method
       	2- Method invocation without parenteses
       	3- Symbols
       	4- Hash

Filling in the Layout
	First step
		- Change layouts/application.html.erb
		- The image:
			<%= link_to image_tag("rails.png", alt: "Rails"), 'http://rubyonrails.org/' %>
			It is put in app/assets/image
		- run http://localhost:3000/static_pages/home
	Bootstrap
		To add bootstrap to project
			include in gemFile	gem 'bootstrap-sass', '2.3.2.0' and
				$ bundle install
			In  config/application.rb
				include -> config.assets.precompile += %w(*.png *.jpg *.jpeg *.gif)
			Create app/assets/stylesheets/custom.css.scss
				and include : 
					@import "bootstrap";
						this include the entire Bootstrap CSS framework.
				This file contrains universal css definitions.
	Partial	
		Inside a html.  Used to call another part of html.
		<%= render 'layouts/header' %>
		Calls app/view/layouts/_header.html.erb

	Asset pipeline - http://guides.rubyonrails.org/asset_pipeline.html
		Files in these directories are automaticaly read via request.
		app/assets: assets specific to the present application
		lib/assets: assets for libraries written by your dev team
vendor/assets: assets from third-party vendors
		- In app/assets/stylesheets/application.css we have
			*= require_self
				
 			*= require_tree .
 				Ensure that all files in app/assets/stylesheets directory will be read to the application as CSS
	Sass (Syntactically awesome stylesheets)
		Accept a .scss file, which is a superset of CSS.
		Very similar to LESS(Windows)
		Ex:
		- FROM
			.center {
			  text-align: center;
			}

			.center h1 {
			  margin-bottom: 10px;
			}
		- TO
			.center {
			  text-align: center;
			  h1 {
			    margin-bottom: 10px;
			  }
			}
	Using link
		<%= link_to "About", '#' %>
		to
		<%= link_to "About", about_path %>

	User Signup
		Create a controler
			$ rails generate controller Users new --no-test-framework
			//Will create the "new" method and its files automaticaly.
		Create the integration test to test the inexisting URL
			$ rails generate integration_test user_pages
			create the file spec/request/user_pages_spec.rb

			require 'spec_helper'
			describe "User pages" do
			  subject { page }

			  describe "signup page" do
			    before { visit signup_path }

			    it { should have_content('Sign up') }
			    it { should have_title(full_title('Sign up')) }
			  end
			end


			RUN: $ bundle exec rspec spec/
			OR
				$ bundle exec rake spec

		Change home to have reference to signup page
		 <%= link_to "Sign up now!", signup_path, class: "btn btn-large btn-primary" %>
    Commit and push this verson
	    git add .
		$ git commit -m "Finish layout and routes"
		$ git checkout master
		$ git merge filling-in-layout
		$ git push
		$ git push heroku
		$ heroku open
		$ heroku logs



























http://railsapps.github.io/installing-rails.html
http://www.psychocats.net/ubuntu/virtualbox


